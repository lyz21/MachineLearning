# encoding=utf-8
"""
@Time : 2020/2/8 18:27 
@Author : LiuYanZhe
@File : ROC.py 
@Software: PyCharm
@Description: 
"""
# 数据准备
import numpy as np
from sklearn import metrics
import matplotlib.pyplot as plt


# 将2维数组转化为1维
def divide_list(list0):
    list1 = []
    list2 = []
    list3 = []
    for items in list0:
        list1.append(items[0])
        list2.append(items[1])
        list3.append(items[2])
    return list1, list2, list3


# 计算ROC和AUC
def ROC_AUC(true_list, pre_list):
    # roc_curve的输入为
    # true_list: 样本标签
    # pre_list: 模型对样本属于正例的概率输出
    # pos_label: 标记为正例的标签，本例中标记为2的即为正例   假阳性率 fp, 真阳性率 tpr, 阈值 thresholds
    fpr, tpr, thresholds = metrics.roc_curve(true_list, pre_list, pos_label=1)
    # print('fpr:', fpr, 'tpr:', tpr, 'thresholds:', thresholds)
    # auc的输入为很简单，就是fpr, tpr值
    auc = metrics.auc(fpr, tpr)
    # print('auc:', auc)
    return fpr, tpr, auc


# 绘制图像,三条线
def Draw_ROC(list_fpr, list_tpr, list_auc):
    lw = 1.5
    ax1 = plt.subplot(1, 1, 1)  # 创建一个画板，同时创建一个子图
    ax1.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
    # 画n条线
    for i in range(len(list_fpr)):
        fpr = list_fpr[i]
        tpr = list_tpr[i]
        auc = list_auc[i]
        # ax1.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % auc)
        ax1.plot(fpr, tpr, lw=lw, label='ROC curve (area = %0.2f)' % auc)
    ax1.set_xlim([0.0, 1.0])
    ax1.set_ylim([0.0, 1.05])
    ax1.set_xlabel('False Positive Rate')
    ax1.set_ylabel('True Positive Rate')
    ax1.set_title('ROC title')
    plt.legend(loc="lower right")
    plt.savefig('pic/ROC.png', dpi=400, bbox_inches='tight')
    plt.show()


# 主方法
def main_lyz(list_pre, list_y):
    list_pre1, list_pre2, list_pre3 = divide_list(list_pre)
    list_y1, list_y2, list_y3 = divide_list(list_y)
    fpr1, tpr1, auc1 = ROC_AUC(list_y1, list_pre1)
    fpr2, tpr2, auc2 = ROC_AUC(list_y2, list_pre2)
    fpr3, tpr3, auc3 = ROC_AUC(list_y3, list_pre3)
    list_fpr = [fpr1, fpr2, fpr3]
    list_tpr = [tpr1, tpr2, tpr3]
    list_auc = [auc1, auc2, auc3]
    Draw_ROC(list_fpr, list_tpr, list_auc)


# y = np.array([1, 1, 2, 2])
# scores = np.array([0.1, 0.4, 0.35, 0.8])
#
# y = np.array(
#     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# scores = np.array(
#     [0.02947591609056149, 0.02819774932952762, 0.08625571818894344, 0.010082627482983868, 0.01997595536679446,
#      0.024160045518698645, 0.020676394141055047, 0.019254100620761917, 0.010244233643486374, 0.02532334434500819,
#      0.04056620309390885, 0.011396969859228554, 0.014073700353724863, 0.004785904210067078, 0.004946870142370356,
#      0.006043373040251815, 0.014416120087086643, 0.018594886644331624, 0.017019777106782055, 0.01111306474597528,
#      0.011497502390422484, 0.011215376380810788, 0.008957984776664285, 0.011074109989124944, 0.0063510199678106305,
#      0.014013593324397246, 0.017153087812490347, 0.018445958834561082, 0.006647098355660164, 0.061863959582246594,
#      0.08399169917593113, 0.06535805890213288, 0.03759046242925373, 0.020136471752004025, 0.08166965357972689,
#      0.026103278947591818, 0.026767255580826328, 0.07291906042394201, 0.025110759387337225, 0.0768548833810996,
#      0.05522002569105363, 0.028093682634516413, 0.06674916990063536, 0.02226431705180438, 0.04555183009596331,
#      0.05087818231243762, 0.05028252846970607, 0.0358953314505539, 0.008902420428964152, 0.0393658504799233,
#      0.02585696574744759, 0.0162649128397714, 0.02485868187888292, 0.014442599759852142, 0.018753211413841793,
#      0.017036571551975667, 0.033407299597349435, 0.03126190580997207, 0.052772471348083716, 0.033724322928700916])
scores = [[0.02947591609056149, 0.022742074238680163, 0.9619134847752404],
          [0.02819774932952762, 0.008005089383636864, 0.9766934962423013],
          [0.08625571818894344, 0.0020899826231921205, 0.9906683994067947],
          [0.010082627482983868, 0.14720441269560697, 0.9321935663854656],
          [0.01997595536679446, 0.034488984816775405, 0.9794270248311404],
          [0.024160045518698645, 0.021702372680556265, 0.9721434061449831],
          [0.020676394141055047, 0.03318224431412426, 0.9638266628347578],
          [0.019254100620761917, 0.010718313803681549, 0.9896121787728934],
          [0.010244233643486374, 0.035962516536268016, 0.978088380709028],
          [0.02532334434500819, 0.008739036200394169, 0.9779332901714873],
          [0.04056620309390885, 0.009790085645353788, 0.9838437235437625],
          [0.011396969859228554, 0.05005384511521045, 0.9635675325696386],
          [0.014073700353724863, 0.04310058031704431, 0.9724414058206741],
          [0.004785904210067078, 0.16270141790264211, 0.906604345455471],
          [0.004946870142370356, 0.09010506268455641, 0.9353178276494005],
          [0.006043373040251815, 0.119484527922567, 0.9264520123089749],
          [0.014416120087086643, 0.03972366552872214, 0.9704919052287124],
          [0.018594886644331624, 0.021588296015850945, 0.9720221701886629],
          [0.017019777106782055, 0.022287073883385185, 0.9743756461754992],
          [0.01111306474597528, 0.04082877914315214, 0.9637036845407789],
          [0.011497502390422484, 0.04843586595305913, 0.9662824501385169],
          [0.011215376380810788, 0.10496502175616321, 0.956080971870733],
          [0.008957984776664285, 0.07353652408788137, 0.952795151289026],
          [0.011074109989124944, 0.07813872382149518, 0.9605773305808991],
          [0.0063510199678106305, 0.19589590099300722, 0.9419056051633803],
          [0.014013593324397246, 0.03719223886849516, 0.9696443447646754],
          [0.017153087812490347, 0.022235327878515586, 0.9725064992218434],
          [0.018445958834561082, 0.020666343609326288, 0.981507469394821],
          [0.006647098355660164, 0.13189779879946276, 0.9417307446277371],
          [0.061863959582246594, 0.005031930748535061, 0.9842500745153404],
          [0.08399169917593113, 0.004332930508693756, 0.9787523973311938],
          [0.06535805890213288, 0.004369321459322384, 0.9897335991480356],
          [0.03759046242925373, 0.010850871859920286, 0.9813774301771708],
          [0.020136471752004025, 0.025820920326084674, 0.96702711920416],
          [0.08166965357972689, 0.00503815745798487, 0.9827689115212298],
          [0.026103278947591818, 0.0071738497549743785, 0.9881800657090009],
          [0.026767255580826328, 0.018932931516631068, 0.9726569926619953],
          [0.07291906042394201, 0.003262538151932987, 0.9864697059136343],
          [0.025110759387337225, 0.013418265955021477, 0.9788308321233632],
          [0.0768548833810996, 0.002937636076004574, 0.9873345901811524],
          [0.05522002569105363, 0.013014666587416825, 0.9635546909330499],
          [0.028093682634516413, 0.0396559804860747, 0.9657008415216116],
          [0.06674916990063536, 0.0034101522127251167, 0.9925463444561643],
          [0.02226431705180438, 0.02404489958890117, 0.9703724000920492],
          [0.04555183009596331, 0.006059620793473419, 0.9859257566291009],
          [0.05087818231243762, 0.005526832540487234, 0.9863012306623521],
          [0.05028252846970607, 0.0056095264615697625, 0.9870423712826515],
          [0.0358953314505539, 0.008016122982397409, 0.9865618817454687],
          [0.008902420428964152, 0.08190478781384632, 0.9331806573702603],
          [0.0393658504799233, 0.006167113173769397, 0.9856617968443702],
          [0.02585696574744759, 0.013227812208092698, 0.9848861863783939],
          [0.0162649128397714, 0.0352769074316783, 0.957770393278755],
          [0.02485868187888292, 0.014272932918629841, 0.977310590496673],
          [0.014442599759852142, 0.04366225430739752, 0.9487495076383794],
          [0.018753211413841793, 0.01976218568066115, 0.9725738956908464],
          [0.017036571551975667, 0.036631977003628954, 0.9672687871859437],
          [0.033407299597349435, 0.00882023302510964, 0.9843008436324903],
          [0.03126190580997207, 0.022576160252794394, 0.9797959696935853],
          [0.052772471348083716, 0.0041202436555750005, 0.9909243121401919],
          [0.033724322928700916, 0.010353429387133814, 0.980686175803314]]
y = np.array([[1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0],
              [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0],
              [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0],
              [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0],
              [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0],
              [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0],
              [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0],
              [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0],
              [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0],
              [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0]])

main_lyz(scores, y)
# scores = np.array([[0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322], [0.5778627149918263, 1.1726094882918928e-06, 0.7290675478394322]])
# y = np.array([[1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0]])
#
# y1 = []
# y2 = []
# y3 = []
# for items in y:
#     y1.append(items[0])
#     y2.append(items[1])
#     y3.append(items[2])
# scores1=[]
# scores2=[]
# scores3=[]
# for items in scores:
#     scores1.append(items[0])
#     scores2.append(items[1])
#     scores3.append(items[2])
#
# print(scores1)
# print(y1)
